"use strict";
const DEVNUM = 40 ;
const SSNUM = 36 ;
const TAGPORT = 1502;
const DEVPORT = 1503;
const MAXTAGS = 30 ; // 보관할 갯수 이 갯수가 초과되면 오래된것부터 삭제

const net = require('net');
const path = require('path');
const express    = require('express');
const app        = express();
app.use(express.json()) ;

const mysql_dbc = require('./db/db_con')();
const con = mysql_dbc.init();
mysql_dbc.test_open(con);

require('date-utils');

let moteinfo = require('./api/moteinfo');
let apinfo = require('./api/apinfo');
let tags = require('./api/temper');
let rdata = new Uint16Array(DEVNUM) ;
let MEAS = 5;

//let GWIP = process.argv[2] || "192.168.8.98" ;
let GWIP = process.env.GWIP || "172.16.162.135" ;
let port = process.env.RESTPORT || 9988 ;
console.info( "GateWay :" + GWIP);

const ModbusRTU = require("modbus-serial");
const client = new ModbusRTU();


app.get('/', (req, res) => {
  res.send('<h2>(주)다윈아이씨티 : Posco 온도 Monitoring 입니다 ( /measure ) </h2>\n');
 });

app.post('/measure', function(req, res){
   var result = {  };
  if(!req.body["active"] || !req.body["wait"]){
      result["success"] = 0;
      result["error"] = "invalid request";
      res.json(result);
      return;
  }
  MEAS = req.body.active ;
  result = {"success": 1};
  res.json(result);
//  resetTimer(req.body.active) ;
  motemac.forEach( (item, index) => {
    sensor_reset(item.Mac, item.act) ;
  });
});

function getMeasure() {
  con.query("SELECT measure FROM MOTECONFIG LIMIT 1",
    (err, dt) => {
      if (err) return 5 ;
      else   MEAS = dt[0].measure ;
//      resetTimer( MEAS) ;
  });
}

 async  function setMeasure() {
  if (!client.isOpen) return ;
  let meas = 0 ;
  client.setID(1) ;

   con.query("SELECT measure FROM MOTECONFIG LIMIT 1",
     (err, dt) => {
       if (err) throw err ;
       meas = dt[0].measure ;
       for (let i = 0 ; i < DEVNUM  ; i++ ) {
         let a = (i*6+3) ;
         let v = meas ;

          client.readHoldingRegisters(a-1, 1 )
               .then ( (d) =>  {
                              if(d.data[0]  != "2") v = 9999 ;
                              client.writeRegister(a, v) ;
                            })
              .catch( (e) => { ; }) ;
       }

    });

}
// Server
let motemac = new Array(DEVNUM);

let motestatus = {"sensorNo": 1, "mac":"", "act" : 0, "descript": "INS" , "batt" : 3.299, "seq": 1 } ;
for (let i=1; i<=DEVNUM; i++) {
  motestatus.sensorNo = i;
  motestatus.seq = i;
  motemac[i-1] =  { "Mac":"X","act":-1}  ;
  con.query('INSERT INTO motestatus SET ?', motestatus , (err, res) => { ; }
  );
}


con.query("SELECT sensorNo as sno, mac FROM motestatus WHERE gubun = 'S' and spare = 'N' ",
(err,dat) => {
  if (err) throw err ;
  for (let i = 0; i < dat.length; i++) {
    motemac[dat[i].sno] = { "Mac":  dat[i].mac.replace(/:/gi,'') , "act": -1} ;
  }
});

app.listen(port, function(){
  console.log('listening on port:' + port);
});

function getDevs() {
  const cli_dev = new ModbusRTU();
  cli_dev.connectTCP(GWIP, { port: DEVPORT })
  .then( async () => {
      let vincr = (DEVNUM*6 > 100) ? 100 : DEVNUM*6 ;
      let rapdev = [] ;
      cli_dev.setID(1);
      for (let ii = 1; ii < DEVNUM*6 ; ii += vincr) {
        await cli_dev.readInputRegisters(ii, vincr)
        .then ( (d) => { rapdev = rapdev.concat(d.data) ;})
        .catch( (e) => {
          console.error( "apdev register read error");
          console.info(e);
        });
      }
      cli_dev.close();
//      let rapdev = new Uint16Array(rdev);
      for (let i=0; i < rapdev.length ; i += 6) {
//        if ( rapdev[i] == 0) continue ;
        let d = (Math.floor( i / 6) + 1);
        let vmac = (rapdev[i] & 255).toString(16).padStart(2,'0') +':' + (rapdev[i] >>>8).toString(16).padStart(2,'0') + ':'
                 + (rapdev[i+1] & 255).toString(16).padStart(2,'0') +':' + (rapdev[i+1] >>>8).toString(16).padStart(2,'0') + ':'
                 + (rapdev[i+2] & 255).toString(16).padStart(2,'0') +':' + (rapdev[i+2] >>>8).toString(16).padStart(2,'0') + ':'
                 + (rapdev[i+3] & 255).toString(16).padStart(2,'0') +':' + (rapdev[i+3] >>>8).toString(16).padStart(2,'0') ;
        let vbatt = rapdev[i+5] / 1000 ;
        let motestatus = {"seq": d, "mac":vmac, "act" : rapdev[i+4], "batt" : vbatt  };

        if ( d-1 < DEVNUM) motemac[d-1].Mac = vmac.replace(/:/gi,'');
        con.query('UPDATE motestatus SET MAC = ?, ACT = ? , BATT = ? where seq = ?',[motestatus.mac, motestatus.act, motestatus.batt, d],
         (err, res) => { ; }
       );
      }
  })
  .catch((e) => {
    console.error(DEVPORT , " port conn error");
    console.info(e);
  });

}


function insTemp() {
  getDevs() ;
  let rtags = new Uint16Array(SSNUM) ;

  client.connectTCP(GWIP, { port: TAGPORT })
  .then( async () => {
    client.setID(1);

    client.readInputRegisters(1, SSNUM)
      .then( function(d) {
          rtags = new Uint16Array(d.data);
      })
      .catch(function(e) {
              console.error("read register error");
              console.info(e); });

      const today = new Date();
      const tm = today.toFormat('YYYY-MM-DD HH24:MI:SS');
      let devs = SSNUM*6;
      let vincr = (devs > 100) ? 100 : devs ;
      let motes = [] ;

    //  async () => {
        for (let ii = 1; ii < devs ; ii += vincr) {
          await  client.readHoldingRegisters(ii, vincr)
          .then ( (d) => { motes = motes.concat(d.data) ;  })
          .catch( (e) => {
            console.error( "Holding register read error");
            console.info(e);
          });
        }
    //      let rapdev = new Uint16Array(rdev);
      con.query( ' delete from moteinfo where tm < (select x.tm from (select tm from moteinfo order by tm desc limit 25000,1) x )',
              (err,res) => { if(err) console.log(err); } ) ;
      devs = ( devs > motes.length ? motes.length : devs );
      let motearr = new Array() ;
      let seq = 0 ;
      for (let i=0; i < devs ; i += 6) {
        seq++ ;
        if ( motes[i] == 0) continue ;
        let t = rtags[seq - 1] / 100.0;
        if (isNaN(t)) t = 0.0;

        let ix = seq - 1;
        if ( ix < SSNUM && motemac[ix] != null ) {
          if ( motemac[ix].act != -1 && motemac[ix].act != motes[i+1] ) {
            sensor_reset(motemac[ix].Mac,  motes[i+1] ) ;
          }
          motemac[ix].act = motes[i+1] ;
        }

        let v = MEAS;
        if(motes[i+1]  != 2) v = 9999 ;
        client.writeRegister(i+3, v) ;
        motearr.push(  [ motes[i],   motes[i+1], v, motes[i+3],  motes[i+4],  motes[i+5], tm, t, seq ] ) ;
        con.query('UPDATE motestatus SET sensorNo = ? where seq = ?',[motes[i], d],
         (err, res) => { if(err) console.log(err); }
       );

      }

      if ( motearr.length > 0) {
          con.query('INSERT INTO moteinfo (sensorNo, act,measure, stand, loc, chock ,  tm, temp, seq  ) values ?', [motearr],
           (err, res) => { if(err) console.log(err); }
          );

          con.query('INSERT INTO motehist (id, sensorNo, act,measure, stand, loc, chock , temp, tm, seq) \
                     select id, sensorNo, act,measure, stand, loc, chock , temp, tm, seq from moteinfo where tm = ?', [tm],
           (err, res) => { if(err) console.log(err); }
          );
      }
      con.query('UPDATE lastime SET lastm = ? where id = 1', [ tm ],
       (err, res) => { if(err) console.log("update lastime :"+ err);  }
      );

      client.close();

  })
  .catch((e) => {
    console.error(TAGPORT , " port conn error");
    console.info(e);
  });
}

/*
let timerId = null;
insTemp() ;
getMeasure()  ;

function resetTimer(tv) {

    if(timerId != null) {

        clearInterval(timerId);

    }
    timerId = setInterval(insTemp, (tv * 1000) - 10);
    console.info("timeInterval : "+ tv + "초")

}
*/

getMeasure()  ;
main_loop();

async function main_loop() {
  let tm1 = new Date() ;
  await insTemp();
  let tm2 = new Date() ;
  let delay = MEAS * 1000 - (tm2 - tm1);
  setTimeout( main_loop,  delay) ;
}

process.on('uncaughtException', function (err) {
	//예상치 못한 예외 처리
	console.error('uncaughtException 발생 : ' + err.stack);
});


let socket = net.connect(40000, GWIP,() => {
  console.log("socket port 40000 check !")
});

//socket.end() ;
 function sensor_reset(mac, act ) {
//    if (act == -1) return ;

    let buf1 = Buffer.alloc(14);
    buf1.writeInt32LE(act == 2 ? MEAS : 9999,10);
    buf1.write(mac,'hex');
    buf1[8] = 1;
    buf1[9] = 4;
    socket =   net.connect(40000, GWIP,() => {
      console.info(mac + " : " + act);
      try {
        socket.write(buf1) ;
      } catch (e) {
        console.log("socket write error :"+ e);
      }
    });
    socket.on('data', function(data){
      console.log('recv:'+data);
      socket.end() ;
    });

    socket.on('error', function(exception){
      console.log('Exception:');
      console.log(exception);
    });


    //
    // let buf2 = Buffer.alloc(11);
    // buf2.write(mac,'hex');
    // buf2[8] = 4;
    // buf2[9] = 1;
    // buf2[10] = 1;
    // socket = await net.connect(40000, GWIP,() => {
    //   socket.write(buf2) ;
    // });
}


/***

function getMotes(temp) {
  console.log(temp.length);
  const today = new Date();
  const tm = today.toFormat('YYYY-MM-DD HH24:MI:SS');
  client.setID(1);
  let devs = DEVNUM*6;
  let vincr = (devs > 100) ? 100 : devs ;
  let motes = [] ;

//  async () => {
    for (let ii = 1; ii < devs ; ii += vincr) {
        client.readHoldingRegisters(ii, vincr)
      .then ( (d) => { motes = motes.concat(d.data) ;  })
      .catch( (e) => {
        console.error( "Holding register read error");
        console.info(e);
      });
    }
//      let rapdev = new Uint16Array(rdev);
  devs = ( devs > motes.length ? motes.length : devs )
  let motes = [];
  console.info( "sensor data :" + devs );
  for (let i=0; i < devs ; i += 6) {
//        if ( rapdev[i] == 0) continue ;
    let t = temp[motes[i]] / 100;
    let moteinfo = [ motes[i],   motes[i+1],  motes[i+2], motes[i+3], motes[i+4], motes[i+5], t, tm ];
    motes.push(moteinfo) ;
    let ix = motes[i] - 1;
    if (ix >= 0 && ix < DEVNUM ) {
      if ( motemac[ix].act != -1 && motemac[ix].act != motes[i+1] ) {
        sensor_reset(motemac[ix].Mac,  motes[i+1] ) ;
      }
      motemac[ix].act = motes[i+1] ;
    }
    // let moteinfo = {"sensoro": motes[i],  "act" : motes[i+1], "measure" : motes[i+2],
    //     "stand" : motes[i+3], "loc": motes[i+4], "chock" : motes[i+5], "temp":t, "tm":tm };
    //
    // con.query('INSERT INTO moteinfo set ?', moteinfo,
    //  (err, res) => { if(err) console.log(err); }
    // );
  }
  con.query('INSERT INTO moteinfo (sensoro, act,measure, stand, loc, chock , temp, tm) ?', [motes],
   (err, res) => { if(err) console.log(err); }
  );
  con.query('INSERT INTO motehist (id, sensoro, act,measure, stand, loc, chock , temp, tm) \
             select id, sensoro, act,measure, stand, loc, chock , temp, tm from moteinfo where tm = ?', [tm],
   (err, res) => { if(err) console.log(err); }
  );


}

*/
